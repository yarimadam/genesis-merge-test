// <auto-generated />
using System;
using CoreData.DbContextsEx;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CoreData.Migrations
{
    [DbContext(typeof(genesisContextEx_PostgreSQL))]
    partial class genesisContextEx_PostgreSQLModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("CoreType.DBModels.AuthActions", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("actionId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("actionType");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("orderIndex");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resourceId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("1");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.HasKey("ActionId");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("IX_AuthActions_resourceId");

                    b.HasIndex("ResourceId", "ActionType")
                        .IsUnique()
                        .HasDatabaseName("authActions_resourceId_and_actionType_must_be_unique");

                    b.ToTable("authActions");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthResources", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("resourceId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("orderIndex");

                    b.Property<string>("ParentResourceCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("parentResourceCode");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("resourceCode");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("resourceName");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer")
                        .HasColumnName("resourceType");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)")
                        .HasColumnName("seoDescription")
                        .HasComment("This tag provides a short description of the page.");

                    b.Property<string>("SeoKeywords")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("seoKeywords");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("seoTitle")
                        .HasComment("While technically not a meta tag, this tag is often used together with the \"description\". The contents of this tag are generally shown as the title in search results (and of course in the user's browser).");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("1");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tableName");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.HasKey("ResourceId");

                    b.HasIndex("ResourceCode")
                        .IsUnique()
                        .HasDatabaseName("ResourceCode_must_be_unique");

                    b.ToTable("authResources");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthTemplate", b =>
                {
                    b.Property<int>("AuthTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authTemplateId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isDefault");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TemplateDefaultPage")
                        .HasColumnType("text")
                        .HasColumnName("templateDefaultPage");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("templateName");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer")
                        .HasColumnName("templateType");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.HasKey("AuthTemplateId");

                    b.ToTable("authTemplate");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthTemplateDetail", b =>
                {
                    b.Property<int>("AuthTemplateDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authTemplateDetailId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnName("actionId");

                    b.Property<int>("AuthTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("authTemplateId");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resourceId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.HasKey("AuthTemplateDetailId");

                    b.HasIndex("AuthTemplateId")
                        .HasDatabaseName("IX_AuthTemplateDetail_authTemplateDetail");

                    b.ToTable("authTemplateDetail");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthUserRights", b =>
                {
                    b.Property<int>("RightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rightId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnName("actionId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<int?>("GroupActionId")
                        .HasColumnType("integer")
                        .HasColumnName("groupActionId");

                    b.Property<int>("RecordType")
                        .HasColumnType("integer")
                        .HasColumnName("recordType");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("RightId");

                    b.HasIndex("ActionId")
                        .HasDatabaseName("IX_AuthUserRights_ActionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuthUserRights_UserId");

                    b.ToTable("authUserRights");
                });

            modelBuilder.Entity("CoreType.DBModels.CommunicationDefinitions", b =>
                {
                    b.Property<int>("CommDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commDefinitionId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CommDefinitionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("commDefinitionName");

                    b.Property<short>("CommDefinitionType")
                        .HasColumnType("smallint")
                        .HasColumnName("commDefinitionType");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<string>("EmailPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailPassword");

                    b.Property<string>("EmailPort")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("emailPort");

                    b.Property<short?>("EmailSecurityType")
                        .HasColumnType("smallint")
                        .HasColumnName("emailSecurityType");

                    b.Property<string>("EmailSenderAccount")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailSenderAccount");

                    b.Property<string>("EmailSenderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailSenderName");

                    b.Property<string>("EmailSmtpServer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailSmtpServer");

                    b.Property<string>("EmailUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailUsername");

                    b.Property<string>("SmsAuthData")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("smsAuthData");

                    b.Property<string>("SmsCompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("smsCompanyName");

                    b.Property<string>("SmsCustomerCode")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("smsCustomerCode");

                    b.Property<string>("SmsEndpointUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("smsEndpointUrl");

                    b.Property<string>("SmsExpectedResponse")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("smsExpectedResponse");

                    b.Property<string>("SmsExpectedStatusCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("smsExpectedStatusCode");

                    b.Property<string>("SmsFormData")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("smsFormData");

                    b.Property<string>("SmsPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("smsPassword");

                    b.Property<string>("SmsProviderCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("smsProviderCode");

                    b.Property<string>("SmsSenderNumber")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("smsSenderNumber");

                    b.Property<string>("SmsUsername")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("smsUsername");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Timezone")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.HasKey("CommDefinitionId");

                    b.ToTable("communicationDefinitions");
                });

            modelBuilder.Entity("CoreType.DBModels.CommunicationTemplates", b =>
                {
                    b.Property<int>("CommTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commTemplateId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CommDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("commDefinitionId");

                    b.Property<string>("CommTemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("commTemplateName");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<string>("EmailBccs")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("emailBCCs");

                    b.Property<string>("EmailBody")
                        .HasColumnType("character varying")
                        .HasColumnName("emailBody");

                    b.Property<string>("EmailCcs")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("emailCCs");

                    b.Property<bool?>("EmailIsBodyHtml")
                        .HasColumnType("boolean")
                        .HasColumnName("emailIsBodyHtml");

                    b.Property<short?>("EmailPriority")
                        .HasColumnType("smallint")
                        .HasColumnName("emailPriority");

                    b.Property<string>("EmailRecipients")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("emailRecipients");

                    b.Property<string>("EmailSenderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emailSenderName");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("emailSubject");

                    b.Property<string>("RequestConditions")
                        .HasColumnType("text")
                        .HasColumnName("requestConditions");

                    b.Property<string>("RequestType")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("requestType");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("responseType");

                    b.Property<string>("ServiceUrls")
                        .HasColumnType("text")
                        .HasColumnName("serviceUrls");

                    b.Property<string>("SmsBody")
                        .HasColumnType("character varying")
                        .HasColumnName("smsBody");

                    b.Property<string>("SmsRecipients")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("smsRecipients");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Timezone")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.HasKey("CommTemplateId");

                    b.ToTable("communicationTemplates");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("companyId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("billingAddress");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityId");

                    b.Property<string>("CompanyLegalTitle")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("companyLegalTitle");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("companyName");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("contactPerson");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("contactPersonEmail");

                    b.Property<string>("ContactPersonTelephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contactPersonTelephone");

                    b.Property<string>("ContactPersonTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contactPersonTitle");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfStaff")
                        .HasColumnType("integer")
                        .HasColumnName("numberOfStaff");

                    b.Property<int?>("SectorId")
                        .HasColumnType("integer")
                        .HasColumnName("sectorId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("1");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("taxNumber");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("taxOffice");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telephone");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("TownId")
                        .HasColumnType("integer")
                        .HasColumnName("townId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("website");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasDatabaseName("CompanyName_must_be_unique");

                    b.ToTable("coreCompany");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("departmentId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<int?>("DepHeadUserId")
                        .HasColumnType("integer")
                        .HasColumnName("depHeadUserId");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("departmentName");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentDepartmentId");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepHeadUserId");

                    b.ToTable("coreDepartment");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreParameters", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("parameterId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("keyCode");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("orderIndex");

                    b.Property<int>("ParentValue")
                        .HasColumnType("integer")
                        .HasColumnName("parentValue");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Translations")
                        .HasColumnType("json")
                        .HasColumnName("translations");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("value");

                    b.HasKey("ParameterId")
                        .HasName("PK_parameters");

                    b.HasIndex("TenantId", "KeyCode", "ParentValue", "Value", "Status")
                        .IsUnique()
                        .HasDatabaseName("KEYCODE_AND_VALUE_PAIR_MUST_BE_UNIQUE");

                    b.ToTable("coreParameters");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreUsers", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birthDate");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityId");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer")
                        .HasColumnName("countyId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("departmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ForgotPasswordExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("forgotPasswordExpiration");

                    b.Property<string>("ForgotPasswordKey")
                        .HasColumnType("text")
                        .HasColumnName("forgotPasswordKey");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<int?>("GeneralUser")
                        .HasColumnType("integer")
                        .HasColumnName("generalUser");

                    b.Property<string>("IbanNumber")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)")
                        .HasColumnName("ibanNumber");

                    b.Property<string>("IdentificationNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("identificationNo");

                    b.Property<short?>("IdentityType")
                        .HasColumnType("smallint")
                        .HasColumnName("identityType");

                    b.Property<short?>("IsAuthorized")
                        .HasColumnType("smallint")
                        .HasColumnName("isAuthorized");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("integer")
                        .HasColumnName("maritalStatus");

                    b.Property<DateTime?>("MarriageDate")
                        .HasColumnType("date")
                        .HasColumnName("marriageDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("registrationNumber");

                    b.Property<int?>("RelatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("relatedUserId");

                    b.Property<int?>("RelationType")
                        .HasColumnType("integer")
                        .HasColumnName("relationType");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleId");

                    b.Property<bool>("ShouldChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("shouldChangePassword");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<string>("TempPassword")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tempPassword");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<int?>("UserTitle")
                        .HasColumnType("integer")
                        .HasColumnName("userTitle");

                    b.Property<string>("VerificationKey")
                        .HasColumnType("text")
                        .HasColumnName("verificationKey");

                    b.Property<DateTime?>("VerificationKeyExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verificationKeyExpiration");

                    b.Property<DateTime?>("WorkEndTime")
                        .HasColumnType("date")
                        .HasColumnName("workEndTime");

                    b.Property<DateTime?>("WorkStartTime")
                        .HasColumnType("date")
                        .HasColumnName("workStartTime");

                    b.HasKey("UserId")
                        .HasName("PK_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("EMAIL_MUST_BE_UNIQUE");

                    b.ToTable("coreUsers");
                });

            modelBuilder.Entity("CoreType.DBModels.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notificationId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deliveryDate");

                    b.Property<int>("NotificationSettingsId")
                        .HasColumnType("integer")
                        .HasColumnName("notificationSettingsId");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sendDate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationSettingsId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("CoreType.DBModels.NotificationSettings", b =>
                {
                    b.Property<int>("NotificationSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notificationSettingsId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AgeRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ageRange");

                    b.Property<int?>("City")
                        .HasColumnType("integer")
                        .HasColumnName("city");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Message")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("message");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notificationType");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("subtitle");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("NotificationSettingsId");

                    b.ToTable("notificationSettings");
                });

            modelBuilder.Entity("CoreType.DBModels.SampleEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employeeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityId");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyId");

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer")
                        .HasColumnName("countyId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("employeeName");

                    b.Property<string>("EmployeeSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employeeSurname");

                    b.Property<int?>("EmployeeTitle")
                        .HasColumnType("integer")
                        .HasColumnName("employeeTitle");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<string>("IbanNumber")
                        .HasColumnType("text")
                        .HasColumnName("ibanNumber");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("taxNumber");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("workStartDate");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("sampleEmployee");
                });

            modelBuilder.Entity("CoreType.DBModels.SampleEmployeeTask", b =>
                {
                    b.Property<int>("EmployeeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employeeTaskId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dueDate");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeId");

                    b.Property<string>("EmployeeTaskDescription")
                        .HasColumnType("text")
                        .HasColumnName("employeeTaskDescription");

                    b.Property<string>("EmployeeTaskName")
                        .HasColumnType("text")
                        .HasColumnName("employeeTaskName");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("TaskTags")
                        .HasColumnType("text")
                        .HasColumnName("taskTags");

                    b.HasKey("EmployeeTaskId");

                    b.ToTable("sampleEmployeeTask");
                });

            modelBuilder.Entity("CoreType.DBModels.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("cityId");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdDate");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createdUserId");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isDefault");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int?>("ParentTenantId")
                        .HasColumnType("integer")
                        .HasColumnName("parentTenantId");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("taxNumber");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("taxOffice");

                    b.Property<string>("TenantName")
                        .HasColumnType("text")
                        .HasColumnName("tenantName");

                    b.Property<int>("TenantType")
                        .HasColumnType("integer")
                        .HasColumnName("tenantType");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updatedUserId");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("TenantId");

                    b.HasIndex("ParentTenantId");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("CoreType.DBModels.TransactionLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("logId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CurrentClaims")
                        .HasColumnType("json")
                        .HasColumnName("currentClaims");

                    b.Property<DateTime>("LogDateBegin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logDateBegin")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LogDateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logDateEnd");

                    b.Property<int>("LogType")
                        .HasColumnType("integer")
                        .HasColumnName("logType");

                    b.Property<string>("Request")
                        .HasColumnType("json")
                        .HasColumnName("request");

                    b.Property<string>("Response")
                        .HasColumnType("json")
                        .HasColumnName("response");

                    b.Property<string>("ServiceUrl")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("serviceUrl");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("statusCode");

                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenantId")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("LogId")
                        .HasName("transactionLogs_pkey");

                    b.ToTable("transactionLogs");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthActions", b =>
                {
                    b.HasOne("CoreType.DBModels.AuthResources", "Resource")
                        .WithMany("AuthActions")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("authActions_resourceId_fkey")
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthTemplateDetail", b =>
                {
                    b.HasOne("CoreType.DBModels.AuthTemplate", "AuthTemplate")
                        .WithMany("AuthTemplateDetail")
                        .HasForeignKey("AuthTemplateId")
                        .HasConstraintName("authTemplateDetail.authTemplateId.fkey")
                        .IsRequired();

                    b.Navigation("AuthTemplate");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthUserRights", b =>
                {
                    b.HasOne("CoreType.DBModels.AuthActions", "Action")
                        .WithMany("AuthUserRights")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("authUserRights_actionId_fkey")
                        .IsRequired();

                    b.HasOne("CoreType.DBModels.CoreUsers", "User")
                        .WithMany("AuthUserRights")
                        .HasForeignKey("UserId")
                        .HasConstraintName("authUserRights_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreDepartment", b =>
                {
                    b.HasOne("CoreType.DBModels.CoreCompany", "Company")
                        .WithMany("CoreDepartment")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("coredepartment_corecompany_fk");

                    b.HasOne("CoreType.DBModels.CoreUsers", "DepHeadUser")
                        .WithMany("CoreDepartment")
                        .HasForeignKey("DepHeadUserId")
                        .HasConstraintName("coredepartment_coreuser_depheaduserid_fk");

                    b.Navigation("Company");

                    b.Navigation("DepHeadUser");
                });

            modelBuilder.Entity("CoreType.DBModels.Notification", b =>
                {
                    b.HasOne("CoreType.DBModels.NotificationSettings", "NotificationSettings")
                        .WithMany("Notification")
                        .HasForeignKey("NotificationSettingsId")
                        .HasConstraintName("notification_settings_fk")
                        .IsRequired();

                    b.Navigation("NotificationSettings");
                });

            modelBuilder.Entity("CoreType.DBModels.Tenant", b =>
                {
                    b.HasOne("CoreType.DBModels.Tenant", "ParentTenant")
                        .WithMany()
                        .HasForeignKey("ParentTenantId");

                    b.Navigation("ParentTenant");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthActions", b =>
                {
                    b.Navigation("AuthUserRights");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthResources", b =>
                {
                    b.Navigation("AuthActions");
                });

            modelBuilder.Entity("CoreType.DBModels.AuthTemplate", b =>
                {
                    b.Navigation("AuthTemplateDetail");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreCompany", b =>
                {
                    b.Navigation("CoreDepartment");
                });

            modelBuilder.Entity("CoreType.DBModels.CoreUsers", b =>
                {
                    b.Navigation("AuthUserRights");

                    b.Navigation("CoreDepartment");
                });

            modelBuilder.Entity("CoreType.DBModels.NotificationSettings", b =>
                {
                    b.Navigation("Notification");
                });
#pragma warning restore 612, 618
        }
    }
}
